{"version":3,"sources":["Redux/store.tsx","Helpers/api.ts","Helpers/functions.tsx","Components/FeedLinePage/FeedContent.tsx","Components/Loader/Loader.tsx","Components/FeedLinePage/PaginationButtons.tsx","Components/FeedLinePage/ErrorBlock.tsx","Components/FeedLinePage/FeedLinePage.tsx","Components/UserProfilePage/UserInfo.tsx","Components/UserProfilePage/UserFeed.tsx","Components/UserProfilePage/UserProfilePage.tsx","App.tsx","reportWebVitals.js","index.tsx"],"names":["SET_AUTHOR_META","stateAuthorMeta","state","authorMeta","initialState","store","createStore","action","type","composeWithDevTools","applyMiddleware","thunk","serverRequest","url","a","fetch","method","headers","then","response","ok","Error","json","serverResponse","roundCommentsValue","value","number","M","Math","round","toFixed","FeedContent","feed","dispatch","useDispatch","windowWidth","window","outerWidth","pickUserData","setAuthorMeta","className","to","name","src","avatar","role","alt","height","width","onClick","nickName","text","hashtags","length","map","hashtag","id","preload","autoPlay","loop","controls","muted","playsInline","videoUrl","commentCount","diggCount","Loader","PaginationButtons","paginationPage","handlePageChange","PAGINATION_PAGES","page","ErrorBlock","location","reload","FeedLinePage","React","useState","feedLine","setFeedLine","isServerResponsed","setIsServerResponsed","isServerError","setIsServerError","setPaginationPage","getFeedLineFromServer","error","console","warn","showableFeedLine","useMemo","indexStart","indexEnd","slice","useEffect","log","withRouter","userName","match","params","useSelector","userInfo","setUserInfo","getUserInfo","userInfoFromServer","video","fans","heart","following","UserFeed","UserProfilePage","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.92b9ac0a.chunk.js","sourcesContent":["import { createStore, AnyAction, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { AuthorMeta } from '../typesDef';\n\n\ntype RootState = {\n  authorMeta: AuthorMeta | null;\n}\n\nconst SET_AUTHOR_META = 'SET_AUTHOR_META';\n\nexport const setAuthorMeta = (authorMeta: AuthorMeta) => ({\n  type: SET_AUTHOR_META, authorMeta,\n});\n\nexport const stateAuthorMeta = (state: RootState) => state.authorMeta;\n\nconst initialState: RootState = {\n  authorMeta: null,\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case SET_AUTHOR_META:\n      return {\n        ...state,\n        authorMeta: { ...action.authorMeta },\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)), // allows you to use http://extension.remotedev.io/\n);\n\nexport default store;\n","const BASE_URL = 'https://tiktok33.p.rapidapi.com';\n// const API_KEY = 'c623a8a0d6msh06483b4961c26b3p1e09c8jsne61c6fde6318';\nconst API_KEY = 'c1257dc04cmshd888bbb072eb770p1f2b8ajsnbf16d4cd1d66';\n\n\nexport const serverRequest = async (url: string) => {\n  const serverResponse = await fetch(`${BASE_URL}${url}`, {\n    method: 'GET',\n    headers: {\n      'x-rapidapi-host': 'tiktok33.p.rapidapi.com',\n      'x-rapidapi-key': `${API_KEY}`,\n    },\n  })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Server error occured');\n      }\n\n      return response.json();\n    });\n\n  return serverResponse;\n};\n","export const roundCommentsValue = (value: string | number) => {\n  let number = +value;\n  const M = 1000000;\n  const K = 1000;\n\n  if (number >= M) {\n    number = Math.round(number / M)\n    return `${number.toFixed(1)}M`\n  }\n\n  if (number >= K) {\n    number = Math.round(number / K)\n    return `${number.toFixed(1)}K`\n  }\n\n  return `${number}`\n}","import { FC } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { FeedLine } from '../../typesDef';\nimport { roundCommentsValue } from '../../Helpers/functions';\nimport { setAuthorMeta } from '../../Redux/store';\n\ntype FeedContentProps = {\n  feed: FeedLine;\n}\n\nconst FeedContent: FC<FeedContentProps> = ({ feed }) => {\n  const dispatch = useDispatch();\n  const windowWidth = window.outerWidth;\n  const authorMeta = feed.authorMeta;\n\n  const pickUserData = () => {\n    dispatch(setAuthorMeta(authorMeta));\n  }\n\n  return (\n    <>\n      <div className=\"feed-container__avatar\">\n        <Link to={`/user/${feed.authorMeta.name}`}>\n          <img\n            src={feed.authorMeta.avatar}\n            role=\"link\"\n            alt=\"user_avatar\"\n            height={windowWidth > 640 ? '56' : '36'}\n            width={windowWidth > 640 ? '56' : '36'}\n            onClick={pickUserData}\n          />\n        </Link>\n      </div>\n\n      <div className=\"feed-container__body feed-content\">\n        <Link to={`/user/${feed.authorMeta.name}`} className='feed-content__link'>\n          <div className=\"feed-content__name\"\n            role=\"link\"\n            onClick={pickUserData}\n          >\n            <span className=\"feed-content__name--main\">\n              {feed.authorMeta.name}\n            </span>\n            <span className=\"feed-content__name--sub\">\n              {feed.authorMeta.nickName}\n            </span>\n          </div>\n        </Link>\n\n        <div>{feed.text}</div>\n\n        {feed.hashtags.length > 0 &&\n          <div className=\"feed-content__hashtags\">\n            <span>\n              {feed.hashtags.map(hashtag => (\n                <span key={hashtag.id} className=\"feed-content__hashtags--hashtag\">\n                  #{hashtag.name}\n                </span>\n              ))}\n            </span>\n          </div>\n        }\n\n        <div className='feed-content__video'>\n          <video\n            preload=\"true\"\n            autoPlay\n            loop={true}\n            width={windowWidth > 640 ? '336px' : '207px'}\n            height={windowWidth > 640 ? '600px' : '370px'}\n            controls\n            muted\n            playsInline\n          >\n            <source src={feed.videoUrl} />\n          </video>\n        </div>\n\n        <div className='feed-content__comments'>\n          <span>\n            <b>Comments:</b>&nbsp;{roundCommentsValue(feed.commentCount)}&nbsp;\n          </span>\n          <span>\n            <b>Likes:</b>&nbsp;{roundCommentsValue(feed.diggCount)}\n          </span>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default FeedContent;\n","import { FC } from 'react';\nimport './Loader.scss';\n\nconst Loader: FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n\nexport default Loader;","import React, { FC } from 'react';\nimport { PAGINATION_PAGES } from './FeedLinePage';\n\ntype Callback = (page: number) => void;\n\ntype PaginationButtonsProps = {\n  paginationPage: number;\n  handlePageChange: Callback;\n}\n\nconst PaginationButtons: FC<PaginationButtonsProps> = ({ paginationPage, handlePageChange }) => {\n  return (\n    <div className=\"container-feedline__buttons\">\n      {PAGINATION_PAGES.map((page) => (\n        <button\n          type=\"button\"\n          className={page !== paginationPage\n            ? \"pagination-button\"\n            : \"pagination-button pagination-button--active\"}\n          onClick={() => handlePageChange(page)}\n        >\n          {page}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default PaginationButtons;","import React, { FC } from 'react';\n\nconst ErrorBlock: FC = () => {\n  return (\n    <div className=\"container-feedline__error\">\n      <span className=\"container-feedline__error-text\">Server conncetion error. Try again later or reload page</span>\n      <button\n        type=\"button\"\n        className=\"error-button\"\n        onClick={() => { window.location.reload(); }}\n      >\n        Reload page\n      </button>\n    </div>\n  );\n};\n\nexport default ErrorBlock;","import React, { FC, useEffect, useMemo } from 'react';\nimport { FeedLine } from '../../typesDef';\nimport { serverRequest } from '../../Helpers/api';\nimport FeedContent from './FeedContent';\nimport Loader from '../Loader/Loader';\nimport PaginationButtons from './PaginationButtons';\nimport ErrorBlock from './ErrorBlock';\nimport './FeedLinePage.scss'\n\nexport const PAGINATION_PAGES = [1, 2, 3];\n\nconst FeedLinePage: FC = () => {\n  const [feedLine, setFeedLine] = React.useState<FeedLine[] | []>([]);\n  const [isServerResponsed, setIsServerResponsed] = React.useState<boolean>(false);\n  const [isServerError, setIsServerError] = React.useState<boolean>(false);\n  const [paginationPage, setPaginationPage] = React.useState(1);\n  const feedCountPerPage = 10;\n\n  const getFeedLineFromServer = async () => {\n    const serverResponse = await serverRequest('/trending/feed')\n    try {\n      setFeedLine(serverResponse);\n      setIsServerResponsed(true);\n    } catch (error) {\n      setIsServerResponsed(true);\n      setIsServerError(true);\n      console.warn(error)\n    }\n  };\n\n  const handlePageChange = (page: number) => {\n    if (page === paginationPage) {\n      return\n    } else {\n      setPaginationPage(page)\n    }\n  }\n\n  const showableFeedLine = useMemo(() => {\n    const indexStart = (feedCountPerPage * paginationPage) - feedCountPerPage;\n    const indexEnd = (feedCountPerPage * paginationPage) - 1;\n\n    return (\n      [...feedLine].slice(indexStart, indexEnd)\n    )\n  }, [paginationPage, feedLine])\n\n  useEffect(() => {\n    getFeedLineFromServer();\n  }, []);\n\n  return (\n    <div className=\"container-feedline\">\n      {!isServerResponsed &&\n        <>\n          <Loader />\n          <div>Loading trending videos...</div>\n        </>\n      }\n\n      {showableFeedLine.length > 0 &&\n        <div className=\"container-feedline__buttons\">\n          <PaginationButtons\n            paginationPage={paginationPage}\n            handlePageChange={handlePageChange}\n          />\n        </div>\n      }\n\n      {isServerError && <ErrorBlock />}\n\n      {showableFeedLine.map((feed) => {\n        return (\n          <div className='feed-container' key={feed.id}>\n            <FeedContent feed={feed} />\n          </div>\n        )\n      })}\n      {console.log(feedLine)}\n\n      {showableFeedLine.length > 0 &&\n        <div className=\"container-feedline__buttons\">\n          <PaginationButtons\n            paginationPage={paginationPage}\n            handlePageChange={handlePageChange}\n          />\n        </div>\n      }\n    </div>\n  )\n}\n\nexport default FeedLinePage;","import { FC, useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { IUserInfo } from '../../typesDef';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { serverRequest } from '../../Helpers/api';\nimport { stateAuthorMeta } from '../../Redux/store';\nimport { roundCommentsValue } from '../../Helpers/functions';\nimport Loader from '../Loader/Loader';\nimport ErrorBlock from '../../Components/FeedLinePage/ErrorBlock';\n\ntype MatchParams = {\n  userName: string;\n}\n\nconst UserInfo: FC<RouteComponentProps<MatchParams>> = ({ match }) => {\n  const userName = match.params.userName;\n  const authorMeta = useSelector(stateAuthorMeta);\n\n  const [userInfo, setUserInfo] = useState<IUserInfo | null>(null); // this code written as simulation of calling server, as no usefull data not coming from required api method\n  const [isServerResponsed, setIsServerResponsed] = useState(false);\n  const [isServerError, setIsServerError] = useState(false);\n  const windowWidth = window.outerWidth;\n\n  useEffect(() => { // this code written as simulation of calling server, as no usefull data not coming from required api method\n    const getUserInfo = async () => {\n      const userInfoFromServer = await serverRequest(`/user/info/${userName}`)\n      try {\n        setIsServerResponsed(true);\n        setUserInfo(userInfoFromServer);\n        setIsServerError(false);\n      } catch (error) {\n        setIsServerResponsed(true);\n        setIsServerError(true);\n        console.warn(error)\n      };\n    };\n    getUserInfo();\n  }, [userName]);\n\n  console.log('userInfo from server', userInfo)\n  return (\n    <>\n      {!isServerResponsed &&\n        <>\n          <Loader />\n          <div>Loading user info...</div>\n        </>\n      }\n\n      {isServerError && <ErrorBlock />}\n\n      {((authorMeta !== null && isServerResponsed && !isServerError) &&\n        <div className=\"user-container__user-info\">\n          <div className=\"user-card\">\n            <div className=\"user-card__avatar\">\n              <img\n                height={windowWidth > 640 ? '220' : '60'}\n                width={windowWidth > 640 ? '220' : '60'}\n                src={authorMeta?.avatar}\n                alt=\"user_avatar\"\n              />\n            </div>\n\n            <div className=\"user-card__info\">\n              <h1>{authorMeta.nickName}</h1>\n              <h2>{authorMeta.name}</h2>\n              <h3>Total videos - {authorMeta.video}</h3>\n              <h3>Fans - {roundCommentsValue(authorMeta.fans)}</h3>\n              <h3>Likes - {roundCommentsValue(authorMeta.heart)}</h3>\n              <h3>Following - {authorMeta.following}</h3>\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default withRouter(UserInfo);\n","import React, { FC, useEffect } from 'react';\nimport { FeedLine } from '../../typesDef';\nimport { serverRequest } from '../../Helpers/api';\nimport Loader from '../Loader/Loader';\nimport ErrorBlock from '../../Components/FeedLinePage/ErrorBlock';\n\nconst UserFeed: FC = () => {\n  const [feedLine, setFeedLine] = React.useState<FeedLine[] | []>([]);\n  const [isServerResponsed, setIsServerResponsed] = React.useState<boolean>(false);\n  const [isServerError, setIsServerError] = React.useState<boolean>(false);\n\n  const getFeedLineFromServer = async () => { //as server api with user feed working not correctly, a fetched standart feedline\n    const serverResponse = await serverRequest('/trending/feed')\n    try {\n      setFeedLine(serverResponse);\n      setIsServerResponsed(true);\n    } catch (error) {\n      setIsServerResponsed(true);\n      setIsServerError(true);\n      console.warn(error);\n    };\n  };\n\n  useEffect(() => {\n    getFeedLineFromServer();\n  }, []);\n\n  return (\n    <>\n      {!isServerResponsed &&\n        <>\n          <Loader />\n          <div>Loading user videos...</div>\n        </>\n      }\n\n      {isServerError && <ErrorBlock />}\n\n      {isServerResponsed && !isServerError &&\n        <div className=\"user-container__user-feed\">\n          {feedLine.map(feed => {\n            return (\n              <div>\n                <video\n                  preload=\"true\"\n                  loop={true}\n                  width=\"207\"\n                  height=\"370\"\n                  controls\n                  muted\n                  playsInline\n                >\n                  <source src={feed.videoUrl} />\n                </video>\n              </div>\n            )\n          })}\n        </div>}\n\n      {isServerResponsed && !isServerError && feedLine.length === 0 &&\n        <h2>No data at the moment. Please reload page</h2>\n      }\n    </>\n  );\n};\n\nexport default UserFeed;\n","import { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport UserInfo from './UserInfo';\nimport UserFeed from './UserFeed';\nimport './UserProfilePage.scss';\n\nconst UserProfilePage: FC = () => {\n\n  return (\n    <div className=\"user-container\">\n      <Link to='/feed'>\n        <span className=\"user-container__back-button\">\n          back to feed\n        </span>\n      </Link>\n      <UserInfo />\n      <UserFeed />\n    </div>\n  )\n}\n\nexport default UserProfilePage;","import { FC } from 'react';\nimport { Switch, Route, withRouter, Redirect } from 'react-router-dom';\nimport FeedLinePage from './Components/FeedLinePage/FeedLinePage';\nimport UserProfilePage from './Components/UserProfilePage/UserProfilePage';\nimport './App.scss';\n\nconst App: FC = () => {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route path='/feed/:pageNumber?' exact component={FeedLinePage} />\n        <Route path='/user/:userId?' exact component={UserProfilePage} />\n        <Redirect to='/feed' />\n      </Switch>\n    </div>\n  );\n};\n\nexport default withRouter(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then((\n      {\n        getCLS, getFID, getFCP, getLCP, getTTFB,\n      },\n    ) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './Redux/store';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}